
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Users {
  id             String    @id @default(uuid())
  clerkId        String   
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt @default(now())
  availableOrganizationsToCreate Int @default(0)
  stripeCustomerId String
}

model Organizations {
  id             String       @id @default(uuid())
  clerkId        String
  settings OrganizationSettings[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt @default(now())
  availableMembersToInvite Int @default(5)
  Features Features[]
}
model Shifts {
  id             String       @id @default(uuid())
  title       String
  startTime   DateTime
  endTime     DateTime
  userId      String
  createdById String
  location    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt @default(now())
  TimeTrackings TimeTrackings[]
  ShiftSwapRequests ShiftSwapRequests[]
}

model Availability {
  id          String       @id @default(uuid())
  memberId   String
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model ShiftSwapRequests {
  id             String       @id @default(uuid())
  requestedBy   String
  requestedById String
  shift        Shifts     @relation(fields: [shiftId], references: [id])
  shiftId      String
  status       SwapStatuses // Enum to represent "PENDING", "APPROVED", "DECLINED"
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt @default(now())
}

model TimeTrackings {
  id             String       @id @default(uuid())
  memberId    String
  shift     Shifts     @relation(fields: [shiftId], references: [id])
  shiftId   String
  clockIn   DateTime?
  clockOut  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}

model Messages {
  id             String       @id @default(uuid())
  senderId   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt DateTime  @updatedAt @default(now())
}
model OrganizationSettings {
  id             String       @id @default(uuid())
  organization  Organizations @relation(fields: [organizationId], references: [id])
  organizationId String 
  metadata Json
}
model Features {
  createdAt  DateTime @default(now())
  updatedAt DateTime  @updatedAt @default(now())
  id             String       @id @default(uuid())
  organization  Organizations @relation(fields: [organizationId], references: [id])
  organizationId String
  setActiveTimestamp     DateTime?
  cost          Int
  description  String
  stripeProductId String  
  name          String
  active        Boolean @default(false)
  metadata Json
}
enum Roles {
  EMPLOYEE
  MANAGER
  OWNER
}

enum SwapStatuses {
  PENDING
  APPROVED
  DECLINED
}

